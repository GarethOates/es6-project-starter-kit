# nodejs modules
fs = require('fs')
amdclean = require('amdclean');
babel = require('babel')

module.exports = (grunt, options) =>

  # the main file without .js
  mainFile = 'index'
  # Get the script intro and outro strings
  startFrag = fs.readFileSync('src/frag/start.frag','utf8').replace(/@SCRIPT/g, options.scriptName)
  # this file is generated by babel, we need it for the browser build
  # for more info https://babeljs.io/docs/usage/external-helpers/
  babelHelpers = require("babel/external-helpers")
  endFrag = fs.readFileSync('src/frag/end.frag','utf8').replace(/@SCRIPT/g, options.scriptName)

  # common requirejs build options
  # they will be exrended below
  requirejsOptions =
    baseUrl: 'tmp'
    name: mainFile
    useStrict: true
    wrap: false
    preserveLicenseComments: true
    findNestedDependencies: true
    onModuleBundleComplete: (data) ->
      outputFile = data.path
      # use the amdclean to remove all the require functions
      # check the options https://github.com/gfranko/amdclean
      fs.writeFileSync outputFile, amdclean.clean(
        code: fs.readFileSync(outputFile)
        # wrap the output in a UMD (Universal Module Definition) pattern
        wrap:
          start: startFrag + '\n' # + babelHelpers + '\n' # uncomment this line if you want to include the babel runtime in your library
          end: endFrag
        )

  # unminified release
  expanded:
    options: grunt.util._.extend({
        out: "dist/#{options.scriptName}.js"
        optimize: 'none'
      }, requirejsOptions)
  # minified release
  min:
    options:
      grunt.util._.extend({
        out: "dist/#{options.scriptName}.min.js"
        optimize: 'uglify2'
      }, requirejsOptions)